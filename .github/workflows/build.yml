# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
    tags: [ "v*", "ci-test/**" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact-id: ${{ steps.upload-artifact.outputs.artifact-id }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-tags: true
        fetch-depth: 0
        ref: ${{ github.ref }}
    - name: Git setup
      run: |
        git config --global commit.gpgsign false
        git config --global user.email olauncher@example.com
        git config --global user.name olauncher
        git config --global core.autocrlf input
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Set up OLauncher
      run: |
        chmod +x ./*.sh || true
        bash decompile.sh
        bash init.sh
        bash applyPatches.sh
    - name: Create local tags for versioning
      run: |
        git -C olauncher tag -a v2.1.1 -m "v2.1.1" || true
        git tag -a v2.1.1 -m "v2.1.1" || true
    - name: Compute versions
      run: |
        echo "OUTER_DESCR=$(git describe --tags --dirty --always || echo unknown)" >> $GITHUB_ENV
        echo "OUTER_SHA=$(git rev-parse --short=12 HEAD)" >> $GITHUB_ENV
        if [ -z "$(git status --porcelain)" ]; then echo "OUTER_DIRTY=clean" >> $GITHUB_ENV; else echo "OUTER_DIRTY=dirty" >> $GITHUB_ENV; fi
        pushd olauncher >/dev/null
        echo "INNER_DESCR=$(git describe --tags --dirty --always || echo unknown)" >> $GITHUB_ENV
        echo "INNER_SHA=$(git rev-parse --short=12 HEAD)" >> $GITHUB_ENV
        if [ -z "$(git status --porcelain)" ]; then echo "INNER_DIRTY=clean" >> $GITHUB_ENV; else echo "INNER_DIRTY=dirty" >> $GITHUB_ENV; fi
        popd >/dev/null
    - name: Build with Maven
      working-directory: olauncher
      run: |
        mvn --batch-mode --update-snapshots verify \
          -Douter.describe="${{ env.OUTER_DESCR }}" \
          -Dinner.describe="${{ env.INNER_DESCR }}" \
          -Douter.sha="${{ env.OUTER_SHA }}" \
          -Dinner.sha="${{ env.INNER_SHA }}" \
          -Douter.dirty="${{ env.OUTER_DIRTY }}" \
          -Dinner.dirty="${{ env.INNER_DIRTY }}"
    - name: Generate redistributable
      run: bash genredist.sh
    - name: Upload redistributable
      uses: actions/upload-artifact@v4
      id: upload-artifact
      with:
        name: OLauncher Redistributable JAR
        path: olauncher-*-redist.jar

  draft-release:
    if: ${{ github.ref_type == 'tag' }}
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download redistributable jar
        uses: actions/download-artifact@v4
        id: download-artifact
        with:
          artifact-ids: ${{ needs.build.outputs.artifact-id }}
          merge-multiple: true
          path: redist
      - name: Create release draft with redistributable
        env:
          RELEASE_TAG: ${{ github.ref_name }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          ARTIFACT_PATH: ${{ steps.download-artifact.outputs.download-path }}
        run: gh release create "$RELEASE_TAG" --draft --verify-tag --title "$RELEASE_TAG" "$ARTIFACT_PATH"/*.jar
