name: Java CI with Maven

on:
  push:
    branches: [ "cross-platform-builds" ]
    tags: [ "v*", "ci-test/**" ]
  pull_request:
    branches: [ "cross-platform-builds" ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact-id: ${{ steps.upload-artifact.outputs.artifact-id }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-tags: true
        fetch-depth: 0
        ref: ${{ github.ref }}
    - name: Git setup
      run: |
        git config --global commit.gpgsign false
        git config --global user.email olauncher@example.com
        git config --global user.name olauncher
        git config --global core.autocrlf input
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Set up OLauncher
      run: |
        chmod +x ./*.sh || true
        bash decompile.sh
        bash init.sh
        bash applyPatches.sh
    - name: Compute versions
      run: |
        echo "OUTER_DESCR=$(git describe --tags --dirty --always || echo unknown)" >> $GITHUB_ENV
        echo "OUTER_SHA=$(git rev-parse --short=12 HEAD)" >> $GITHUB_ENV
        if [ -z "$(git status --porcelain)" ]; then echo "OUTER_DIRTY=clean" >> $GITHUB_ENV; else echo "OUTER_DIRTY=dirty" >> $GITHUB_ENV; fi
        pushd olauncher >/dev/null
        echo "INNER_DESCR=$(git describe --tags --dirty --always || echo unknown)" >> $GITHUB_ENV
        echo "INNER_SHA=$(git rev-parse --short=12 HEAD)" >> $GITHUB_ENV
        if [ -z "$(git status --porcelain)" ]; then echo "INNER_DIRTY=clean" >> $GITHUB_ENV; else echo "INNER_DIRTY=dirty" >> $GITHUB_ENV; fi
        popd >/dev/null
    - name: Build with Maven
      working-directory: olauncher
      run: |
        mvn --batch-mode --update-snapshots verify \
          -Douter.describe="${{ env.OUTER_DESCR }}" \
          -Dinner.describe="${{ env.INNER_DESCR }}" \
          -Douter.sha="${{ env.OUTER_SHA }}" \
          -Dinner.sha="${{ env.INNER_SHA }}" \
          -Douter.dirty="${{ env.OUTER_DIRTY }}" \
          -Dinner.dirty="${{ env.INNER_DIRTY }}"
    - name: Generate redistributable
      run: bash genredist.sh
    - name: Upload redistributable
      uses: actions/upload-artifact@v4
      id: upload-artifact
      with:
        name: OLauncher Redistributable JAR
        path: olauncher-*-redist.jar

  package-windows:
    runs-on: windows-latest
    needs: build
    outputs:
      artifact-id: ${{ steps.upload-win.outputs.artifact-id }}
    steps:
      - name: Download redistributable jar
        uses: actions/download-artifact@v4
        with:
          name: OLauncher Redistributable JAR
          path: dist
      - name: Set up JDK 21 (includes jpackage)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
      - name: Find redistributable JAR
        id: jar
        shell: bash
        run: echo "JAR=$(ls dist/*-redist.jar | head -n1)" >> $GITHUB_OUTPUT
        # Remove when finished
      - name: Compute APP_VER
        shell: bash
        run: |
          APP_VER="${GITHUB_REF_NAME#v}"

          is_numeric_ver() {
            [[ "$1" =~ ^[0-9]+(\.[0-9]+){0,2}$ ]]
          }

          if [[ "${GITHUB_REF_TYPE}" != "tag" || ! $(is_numeric_ver "$APP_VER") ]]; then
            POM_VER=$(grep -m1 '<version>' olauncher/pom.xml | sed -E 's/.*<version>([^<]+).*/\1/')
            if is_numeric_ver "$POM_VER"; then
              APP_VER="$POM_VER"
            else
              APP_VER="0.0.${GITHUB_RUN_NUMBER}"
            fi
          fi

          echo "APP_VER=$APP_VER" >> "$GITHUB_ENV"
      - name: Build EXE with jpackage
        shell: bash
        run: |
          APP_VER="${GITHUB_REF_NAME#v}"
          # If your JAR lacks a Main-Class manifest, add: --main-class fully.qualified.Main
          jpackage \
            --type exe \
            --name "OLauncher" \
            --app-version "${APP_VER}" \
            --input dist \
            --main-jar "$(basename '${{ steps.jar.outputs.JAR }}')" \
            --vendor "OLauncher" \
            --dest . \
            --win-dir-chooser \
            --win-menu \
            --win-shortcut
      - name: Upload Windows installer
        uses: actions/upload-artifact@v4
        id: upload-win
        with:
          name: OLauncher Windows Installer
          path: |
            *.exe
            *.msi
          if-no-files-found: warn

  package-macos:
    runs-on: macos-latest
    needs: build
    outputs:
      artifact-id: ${{ steps.upload-mac.outputs.artifact-id }}
    steps:
      - name: Download redistributable jar
        uses: actions/download-artifact@v4
        with:
          name: OLauncher Redistributable JAR
          path: dist
      - name: Set up JDK 21 (includes jpackage)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
      - name: Find redistributable JAR
        id: jar
        run: echo "JAR=$(ls dist/*-redist.jar | head -n1)" >> $GITHUB_OUTPUT
      # Remove when finished
      - name: Compute APP_VER
        shell: bash
        run: |
          APP_VER="${GITHUB_REF_NAME#v}"

          is_numeric_ver() {
            [[ "$1" =~ ^[0-9]+(\.[0-9]+){0,2}$ ]]
          }

          if [[ "${GITHUB_REF_TYPE}" != "tag" || ! $(is_numeric_ver "$APP_VER") ]]; then
            POM_VER=$(grep -m1 '<version>' olauncher/pom.xml | sed -E 's/.*<version>([^<]+).*/\1/')
            if is_numeric_ver "$POM_VER"; then
              APP_VER="$POM_VER"
            else
              APP_VER="0.0.${GITHUB_RUN_NUMBER}"
            fi
          fi

          echo "APP_VER=$APP_VER" >> "$GITHUB_ENV"
      - name: Build DMG with jpackage
        run: |
          APP_VER="${GITHUB_REF_NAME#v}"
          # If your JAR lacks a Main-Class manifest, add: --main-class fully.qualified.Main
          jpackage \
            --type dmg \
            --name "OLauncher" \
            --app-version "${APP_VER}" \
            --input dist \
            --main-jar "$(basename '${{ steps.jar.outputs.JAR }}')" \
            --vendor "OLauncher" \
            --dest .
      - name: Upload macOS installer
        uses: actions/upload-artifact@v4
        id: upload-mac
        with:
          name: OLauncher macOS DMG
          path: |
            *.dmg
          if-no-files-found: warn

  draft-release:
    if: ${{ github.ref_type == 'tag' }}
    needs: [build, package-windows, package-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          artifact-ids: ${{ needs.build.outputs.artifact-id }},${{ needs.package-windows.outputs.artifact-id }},${{ needs.package-macos.outputs.artifact-id }}
          merge-multiple: true
          path: release-assets
      - name: Create release draft with JAR + installers
        env:
          RELEASE_TAG: ${{ github.ref_name }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
        run: gh release create "$RELEASE_TAG" --draft --verify-tag --title "$RELEASE_TAG" release-assets/*.{jar,exe,msi,dmg} || gh release upload "$RELEASE_TAG" release-assets/*.{jar,exe,msi,dmg}
