name: Java CI with Maven

on:
  push:
    branches: [ "cross-platform-builds" ]
    tags: [ "v*", "ci-test/**" ]
  pull_request:
    branches: [ "cross-platform-builds" ]
env:
  APP_VER: "2.1.3"


jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact-id: ${{ steps.upload-artifact.outputs.artifact-id }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-tags: true
        fetch-depth: 0
        ref: ${{ github.ref }}
    - name: Git setup
      run: |
        git config --global commit.gpgsign false
        git config --global user.email olauncher@example.com
        git config --global user.name olauncher
        git config --global core.autocrlf input
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Set up OLauncher
      run: |
        chmod +x ./*.sh || true
        bash decompile.sh
        bash init.sh
        bash applyPatches.sh
    - name: Compute versions
      run: |
        echo "OUTER_DESCR=$(git describe --tags --dirty --always || echo unknown)" >> $GITHUB_ENV
        echo "OUTER_SHA=$(git rev-parse --short=12 HEAD)" >> $GITHUB_ENV
        if [ -z "$(git status --porcelain)" ]; then echo "OUTER_DIRTY=clean" >> $GITHUB_ENV; else echo "OUTER_DIRTY=dirty" >> $GITHUB_ENV; fi
        pushd olauncher >/dev/null
        echo "INNER_DESCR=$(git describe --tags --dirty --always || echo unknown)" >> $GITHUB_ENV
        echo "INNER_SHA=$(git rev-parse --short=12 HEAD)" >> $GITHUB_ENV
        if [ -z "$(git status --porcelain)" ]; then echo "INNER_DIRTY=clean" >> $GITHUB_ENV; else echo "INNER_DIRTY=dirty" >> $GITHUB_ENV; fi
        popd >/dev/null
    - name: Build with Maven
      working-directory: olauncher
      run: |
        mvn --batch-mode --update-snapshots verify \
          -Douter.describe="${{ env.OUTER_DESCR }}" \
          -Dinner.describe="${{ env.INNER_DESCR }}" \
          -Douter.sha="${{ env.OUTER_SHA }}" \
          -Dinner.sha="${{ env.INNER_SHA }}" \
          -Douter.dirty="${{ env.OUTER_DIRTY }}" \
          -Dinner.dirty="${{ env.INNER_DIRTY }}"
    - name: Generate redistributable
      run: bash genredist.sh
    - name: Upload redistributable
      uses: actions/upload-artifact@v4
      id: upload-artifact
      with:
        name: OLauncher Redistributable JAR
        path: olauncher-*-redist.jar

  windows-build:
    runs-on: windows-latest
    needs: build
    steps:
      - name: Download redistributable jar
        uses: actions/download-artifact@v4
        with:
          name: OLauncher Redistributable JAR
          path: dist

      - name: Install Launch4j
        run: choco install -y launch4j

      - name: Write Launch4j config
        shell: bash
        run: |
          cat > l4j.xml <<'XML'
          <launch4jConfig>
            <dontWrapJar>false</dontWrapJar>
            <headerType>gui</headerType>
            <jar>dist/olauncher-2.1.3-redist.jar</jar>
            <outfile>OLauncher-${{ env.APP_VER }}.exe</outfile>
            <errTitle>OLauncher</errTitle>
            <chdir>.</chdir>
            <priority>normal</priority>
            <stayAlive>false</stayAlive>
            <restartOnCrash>false</restartOnCrash>
            <classPath>
              <mainClass>dev.figboot.autool.AutoOL</mainClass>
            </classPath>
            <jre>
              <minVersion>8</minVersion>
              <opt>-Xmx512m</opt>
              <jdkPreference>preferJre</jdkPreference>
              <runtimeBits>64/32</runtimeBits>
            </jre>
          </launch4jConfig>
          XML

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'

      - name: Build EXE via launch4j.jar
        shell: bash
        run: |
          "$JAVA_HOME/bin/java" -jar "/c/Program Files (x86)/Launch4j/launch4j.jar" l4j.xml

      - name: Upload Windows EXE
        uses: actions/upload-artifact@v4
        with:
          name: OLauncher Windows EXE
          path: OLauncher-${{ env.APP_VER }}.exe

  macos-build:
    runs-on: macos-latest
    needs: build
    steps:
      - name: Download redistributable jar
        uses: actions/download-artifact@v4
        with:
          name: OLauncher Redistributable JAR
          path: dist

      - name: Create .app
        run: |
          APP="OLauncher.app"
          mkdir -p "$APP/Contents/MacOS" "$APP/Contents/Resources"

          # Launcher (uses system Java on PATH)
          cat > "$APP/Contents/MacOS/OLauncher" <<'SH'
          #!/bin/bash
          set -e
          DIR="$(cd "$(dirname "$0")"/../Resources && pwd)"
          if ! command -v /usr/bin/env >/dev/null || ! /usr/bin/env java -version >/dev/null 2>&1; then
            osascript -e 'display dialog "Java 11+ is required. Please install a JRE/JDK." buttons {"OK"} default button 1 with icon stop'
            exit 1
          fi
          exec /usr/bin/env java -jar "$DIR/olauncher-2.1.3-redist.jar"
          SH
          chmod +x "$APP/Contents/MacOS/OLauncher"

          # Info.plist
          cat > "$APP/Contents/Info.plist" <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>CFBundleName</key><string>OLauncher</string>
            <key>CFBundleDisplayName</key><string>OLauncher</string>
            <key>CFBundleIdentifier</key><string>com.olauncher.app</string>
            <key>CFBundleVersion</key><string>${APP_VER}</string>
            <key>CFBundleShortVersionString</key><string>${APP_VER}</string>
            <key>CFBundleExecutable</key><string>OLauncher</string>
            <key>LSApplicationCategoryType</key><string>public.app-category.utilities</string>
            <key>LSMinimumSystemVersion</key><string>10.6</string>
          </dict></plist>
          PLIST

          # Put JAR in Resources
          cp dist/olauncher-2.1.3-redist.jar "$APP/Contents/Resources/"

      - name: Build DMG
        run: |
          hdiutil create -volname "OLauncher" -srcfolder "OLauncher.app" -ov -format UDZO "OLauncher-${APP_VER}.dmg"

      - name: Upload macOS DMG
        uses: actions/upload-artifact@v4
        with:
          name: OLauncher macOS DMG
          path: OLauncher-${{ env.APP_VER }}.dmg

  draft-release:
    if: ${{ github.ref_type == 'tag' }}
    needs: [build, windows-build, macos-build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          artifact-ids: ${{ needs.build.outputs.artifact-id }},${{ needs.windows-build.outputs.artifact-id }},${{ needs.macos-build.outputs.artifact-id }}
          merge-multiple: true
          path: release-assets
      - name: Create release draft with JAR + installers
        env:
          RELEASE_TAG: ${{ github.ref_name }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
        run: gh release create "$RELEASE_TAG" --draft --verify-tag --title "$RELEASE_TAG" release-assets/*.{jar,exe,msi,dmg} || gh release upload "$RELEASE_TAG" release-assets/*.{jar,exe,msi,dmg}
